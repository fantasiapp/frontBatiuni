{"ast":null,"code":"var AuthState_1;\nimport { __decorate } from \"tslib\";\nimport { Action, Selector, State } from \"@ngxs/store\";\nimport { ConfirmAccount, Login, Logout, Register, ForgotPassword } from \"./auth.actions\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { of, throwError } from \"rxjs\";\nimport * as strings from '../../app/shared/common/strings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/http.service\";\nimport * as i2 from \"@angular/router\";\nlet AuthState = AuthState_1 = class AuthState {\n  constructor(http, router, zone) {\n    this.http = http;\n    this.router = router;\n    this.zone = zone;\n  }\n\n  static token(state) {\n    return state.token;\n  }\n\n  static isAutheticated(state) {\n    return !!state.token;\n  }\n\n  static handleError(err) {\n    let error;\n    if (err.status == 404) error = strings.requests.INVALID_CONFIG;else if (err.status == 500) error = strings.requests.SERVER_UNAVAILABLE;else if (err.status == 400) error = strings.requests.INVALID_CREDENTIALS;else error = strings.requests.UNEXPECTED_ERROR;\n    return throwError({\n      all: error\n    });\n  }\n\n  login(ctx, action) {\n    let {\n      username,\n      password\n    } = action,\n        req = this.http.post('api-token-auth', {\n      username,\n      password\n    });\n    return req.pipe(catchError(err => {\n      return AuthState_1.handleError(err);\n    }), tap(response => {\n      let token = response['token'];\n      ctx.patchState({\n        token,\n        username: action.username\n      });\n    }));\n  }\n\n  logout(ctx) {\n    const state = ctx.getState();\n    if (!state.token) return of(true);\n    let req = of(true);\n    /* data to disconnect */\n\n    return req.pipe(tap(() => {\n      ctx.patchState({\n        token: null,\n        username: null\n      });\n      this.zone.run(() => {\n        console.log('navigating to /connexion');\n        this.router.navigate(['', 'connexion']);\n      });\n    }));\n  }\n\n  register(ctx, action) {\n    const req = this.http.post('initialize', action);\n    return req.pipe(catchError(err => {\n      return AuthState_1.handleError(err);\n    }), map(response => {\n      if (response['register'] == 'OK') return true;\n      throw response.messages;\n    }), tap(() => {\n      ctx.patchState({\n        pendingEmail: action.email\n      });\n    }));\n  }\n\n  confirmAccount(ctx, {\n    token\n  }) {\n    const req = this.http.get('initialize', {\n      action: 'registerConfirm',\n      token\n    });\n    return req.pipe(tap(result => {\n      if (result['registerConfirm'] == 'Error') throw result['messages'];\n      ctx.patchState({\n        pendingEmail: ''\n      });\n    }));\n  }\n\n  forgotPassword(ctx, data) {\n    let {\n      token,\n      password\n    } = data;\n    const req = this.http.post('initialize', {\n      action: 'newPassword',\n      token,\n      password\n    });\n    return req.pipe(tap(res => {\n      if (res['newPassword'] == 'Error') throw res['messages'];else return true;\n    }));\n  }\n\n};\n\nAuthState.ɵfac = function AuthState_Factory(t) {\n  return new (t || AuthState)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone));\n};\n\nAuthState.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthState,\n  factory: AuthState.ɵfac\n});\n\n__decorate([Action(Login)], AuthState.prototype, \"login\", null);\n\n__decorate([Action(Logout)], AuthState.prototype, \"logout\", null);\n\n__decorate([Action(Register)], AuthState.prototype, \"register\", null);\n\n__decorate([Action(ConfirmAccount)], AuthState.prototype, \"confirmAccount\", null);\n\n__decorate([Action(ForgotPassword)], AuthState.prototype, \"forgotPassword\", null);\n\n__decorate([Selector()], AuthState, \"token\", null);\n\n__decorate([Selector()], AuthState, \"isAutheticated\", null);\n\nAuthState = AuthState_1 = __decorate([State({\n  name: 'auth',\n  defaults: {\n    token: null,\n    username: null,\n    pendingEmail: ''\n  }\n})], AuthState);\nexport { AuthState };\n;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport { DataQueries } from 'src/models/new/data.state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngxs/store\";\nconst _c0 = [\"map\"];\nexport let UIMapComponent = /*#__PURE__*/(() => {\n  class UIMapComponent {\n    constructor(store) {\n      this.store = store; //I bet you can make a better system, this just works\n\n      this.mode = 'company';\n      this._posts = [];\n      this._companies = [];\n      this.availabilities = [];\n      this.center = {\n        longitude: 2.349014,\n        latitude: 48.864716\n      };\n      this.postClick = new EventEmitter();\n      this.companyClick = new EventEmitter();\n      this.mapboxStyles = 'mapbox://styles/zeuschatoui/ckxj0zqovi9lf15p5gysrfax4';\n      this.initialized = false;\n      this.aliveMarkers = [];\n    }\n\n    get posts() {\n      return this._posts;\n    }\n\n    set posts(values) {\n      this.mode = 'post';\n      this._posts = values;\n      this._companies = this.store.selectSnapshot(DataQueries.getMany('Company', this.posts.map(post => post.company)));\n      if (this.initialized) this.showPosts();\n    }\n\n    get companies() {\n      return this._companies;\n    }\n\n    set companies(values) {\n      this.mode = 'company';\n      this._companies = values;\n      this._posts = [];\n      if (this.initialized) this.showCompanies();\n    }\n\n    createPopup() {\n      let span = document.createElement('span');\n      span.classList.add('mapbox-popup-content');\n      span.innerText = \"\";\n\n      span.onclick = () => {};\n\n      this.popupContent = span;\n    }\n\n    loadPopup(company, post) {\n      this.popupContent.innerHTML = `${company.name}`;\n\n      this.popupContent.onclick = () => {\n        if (this.mode == 'post') this.postClick.emit(post);else this.companyClick.emit(company);\n      };\n\n      return new mapboxgl.Popup().setDOMContent(this.popupContent);\n    }\n\n    createMarker(icon = 'selected') {\n      const marker = document.createElement('div');\n      const WH = 70;\n      marker.className = 'marker-icon';\n      marker.style.backgroundImage = `url(assets/map/${icon}.svg)`;\n      marker.style.backgroundSize = '100%';\n      marker.style.width = `${WH}px`;\n      marker.style.height = `${WH}px`;\n      return marker;\n    }\n\n    ngOnInit() {\n      this.mapbox = new mapboxgl.Map({\n        accessToken: 'pk.eyJ1IjoiemV1c2NoYXRvdWkiLCJhIjoiY2t3c2h0Yjk0MGo2NDJvcWh3azNwNnF6ZSJ9.ZBbZHpP2RFSzCUPkjfEvMQ',\n        container: this.view.nativeElement,\n        style: this.mapboxStyles,\n        zoom: 5,\n        center: [this.center.longitude, this.center.latitude],\n        attributionControl: false\n      });\n      this.createPopup();\n      this.refresh();\n      this.initialized = true;\n    }\n\n    refresh() {\n      this.reset();\n      if (this.mode == 'post') this.showPosts();else this.showCompanies();\n    }\n\n    showPosts() {\n      this.posts.forEach((post, i) => {\n        if (post.latitude == null || post.longitude == null) return;\n        let marker = new mapboxgl.Marker(this.createMarker()).setLngLat([post.longitude, post.latitude]).addTo(this.mapbox);\n\n        marker.getElement().onclick = () => {\n          marker.setPopup(this.loadPopup(this.companies[i], post));\n        };\n\n        this.aliveMarkers.push(marker);\n        return marker;\n      });\n    }\n\n    showCompanies() {\n      this.companies.forEach((company, i) => {\n        if (company.latitude == null || company.longitude == null) return;\n        let marker = new mapboxgl.Marker(this.createMarker(this.availabilities[i])).setLngLat([company.longitude, company.latitude]).addTo(this.mapbox);\n\n        marker.getElement().onclick = () => {\n          marker.setPopup(this.loadPopup(company));\n        };\n\n        this.aliveMarkers.push(marker);\n        return marker;\n      });\n    }\n\n    reset() {\n      this.mapbox.setZoom(5);\n      this.mapbox.setCenter([this.center.longitude, this.center.latitude]);\n\n      for (const marker of this.aliveMarkers) marker.remove();\n\n      this.aliveMarkers.length = 0;\n    }\n\n  }\n\n  UIMapComponent.ɵfac = function UIMapComponent_Factory(t) {\n    return new (t || UIMapComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  UIMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UIMapComponent,\n    selectors: [[\"mapbox-batiuni\"]],\n    viewQuery: function UIMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.view = _t.first);\n      }\n    },\n    inputs: {\n      posts: \"posts\",\n      companies: \"companies\",\n      availabilities: \"availabilities\",\n      center: \"center\"\n    },\n    outputs: {\n      postClick: \"postClick\",\n      companyClick: \"companyClick\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"map\"], [\"map\", \"\"]],\n    template: function UIMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block;width:100%;height:100%}@media (min-width: 769px){[_nghost-%COMP%]{position:absolute;top:210px;left:400px;width:calc(100vw - 400px);height:calc(100vh - 220px)}}.map[_ngcontent-%COMP%]{width:100%;height:600px}@media (min-width: 769px){.map[_ngcontent-%COMP%]{height:100%}}.marker-icon[_ngcontent-%COMP%]{display:block;border:none;border-radius:50%;cursor:pointer;padding:0}\"],\n    changeDetection: 0\n  });\n  return UIMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
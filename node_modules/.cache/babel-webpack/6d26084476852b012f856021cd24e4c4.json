{"ast":null,"code":"var AppState_1;\nimport { __decorate } from \"tslib\";\nimport { Device } from \"@capacitor/device\";\nimport { Action, Selector, State } from \"@ngxs/store\";\nimport { from } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\nimport { AuthState } from \"src/models/auth/auth.state\";\nimport { DataState } from \"src/models/new/data.state\";\nimport { Load } from \"./app.actions\";\nimport * as i0 from \"@angular/core\";\nlet AppState = AppState_1 = class AppState {\n  static auth(state) {\n    return state;\n  }\n\n  static device(state) {\n    return state.device;\n  } //move to app initializer\n\n\n  onLoad(ctx, action) {\n    return from(Device.getInfo()).pipe(tap(device => {\n      ctx.patchState({\n        device\n      });\n    }));\n  }\n\n};\n\nAppState.ɵfac = function AppState_Factory(t) {\n  return new (t || AppState)();\n};\n\nAppState.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppState,\n  factory: AppState.ɵfac\n});\n\n__decorate([Action(Load)], AppState.prototype, \"onLoad\", null);\n\n__decorate([Selector([AuthState])], AppState, \"auth\", null);\n\n__decorate([Selector([AppState_1])], AppState, \"device\", null);\n\nAppState = AppState_1 = __decorate([State({\n  name: 'app',\n  defaults: {\n    device: null\n  },\n  children: [AuthState, DataState]\n})], AppState);\nexport { AppState };\n;","map":null,"metadata":{},"sourceType":"module"}
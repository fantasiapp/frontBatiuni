{"ast":null,"code":"import { TemplateRef, ViewContainerRef } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { DimensionMenu } from \"../../common/classes\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"view\"];\nconst _c1 = [\"menuTemplate\"];\n\nfunction UITooltipComponent_ng_template_4_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵlistener(\"click\", function UITooltipComponent_ng_template_4_li_1_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const item_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onListItemClicked(item_r6);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵclassMap(item_r6.class || \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r6.name, \" \");\n  }\n}\n\nfunction UITooltipComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4);\n    i0.ɵɵtemplate(1, UITooltipComponent_ng_template_4_li_1_Template, 2, 3, \"li\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const menu_r3 = ctx.$implicit;\n    const items_r4 = ctx.items;\n    i0.ɵɵclassMap(menu_r3.class);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r4);\n  }\n}\n\nconst TRANSITION_DURATION = 250; //only works with a service\n\nexport let UITooltipComponent = /*#__PURE__*/(() => {\n  class UITooltipComponent extends DimensionMenu {\n    constructor(cd, componentFactoryResolver, service) {\n      super();\n      this.cd = cd;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.service = service;\n      this.fromService = false;\n      this.keepAlive = true;\n      this.willClose = false;\n      this.destroy$ = new Subject();\n      this.block = false;\n    }\n\n    ngOnInit() {\n      if (!this.fromService) return;\n      this.service.views$.pipe(takeUntil(this.destroy$)).subscribe(view => {\n        if (!view) return this.close();\n        if (!this.view) return; //ignore\n\n        this.view.clear();\n\n        if (view.type == 'context') {\n          if (!this.content || this.content.type != 'template') return;\n          this.content.context = view.context;\n          this.view.createEmbeddedView(this.content.template, this.content.context);\n        } else if (view.type == 'template') {\n          this.content = view;\n          this.view.createEmbeddedView(this.content.template, this.content.context);\n        } else if (view.type == 'component') {\n          this.content = view;\n          const factory = this.componentFactoryResolver.resolveComponentFactory(this.content.component),\n                componentRef = this.view.createComponent(factory);\n          if (this.content.init) this.content.init(componentRef.instance);\n        } else {\n          this.content = view;\n          this.view.createEmbeddedView(this.menuTemplate, {\n            $implicit: view,\n            items: view.items\n          });\n        }\n\n        this.open = true;\n        this.cd.markForCheck();\n      });\n      this.service.dimension$.pipe(takeUntil(this.destroy$)).subscribe(dimension => {\n        this.dimension = dimension;\n        this.cd.markForCheck();\n      });\n    }\n\n    close() {\n      this.willClose = true;\n      setTimeout(() => {\n        var _a, _b;\n\n        if (!this.keepAlive) (_a = this.view) === null || _a === void 0 ? void 0 : _a.clear();\n        this.willClose = false;\n        this.openChange.emit(this._open = false);\n        if ((_b = this.content) === null || _b === void 0 ? void 0 : _b.close) this.content.close();\n        this.cd.markForCheck();\n      }, TRANSITION_DURATION);\n    }\n\n    onListItemClicked(item) {\n      var _a;\n\n      (_a = item.click) === null || _a === void 0 ? void 0 : _a.call(item);\n      if (this.content.hideOnClick) this.close();\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n  }\n\n  UITooltipComponent.ɵfac = function UITooltipComponent_Factory(t) {\n    return new (t || UITooltipComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(UITooltipService));\n  };\n\n  UITooltipComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UITooltipComponent,\n    selectors: [[\"tooltip\"]],\n    viewQuery: function UITooltipComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n        i0.ɵɵviewQuery(_c1, 7, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.view = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuTemplate = _t.first);\n      }\n    },\n    inputs: {\n      content: \"content\",\n      fromService: \"fromService\",\n      keepAlive: \"keepAlive\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"cover-parent\", \"background\", 3, \"click\"], [1, \"content\", \"cover-parent\"], [\"view\", \"\"], [\"menuTemplate\", \"\"], [1, \"list\", \"background-white\", \"font-Poppins\", \"text-light-emphasis\"], [3, \"class\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function UITooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function UITooltipComponent_Template_div_click_0_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementContainer(2, null, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, UITooltipComponent_ng_template_4_Template, 2, 3, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"open\", ctx.open && !ctx.willClose);\n      }\n    },\n    directives: [i1.NgForOf],\n    styles: [\"[_nghost-%COMP%]{position:fixed;color:#000;visibility:hidden;z-index:-1}.open[_nghost-%COMP%]{visibility:visible;z-index:unset}.background[_ngcontent-%COMP%]{position:fixed;left:0;top:0;width:100vw;height:100vh;background-color:#ccc;opacity:.5}.content[_ngcontent-%COMP%]{background-color:#fff;border-radius:6px;box-shadow:2px 4px 3px #ccc;transition:opacity .25s ease-out 0s;will-change:opacity;opacity:0}.content.open[_ngcontent-%COMP%]{opacity:1}.list[_ngcontent-%COMP%]{list-style-type:none;cursor:pointer}\"],\n    changeDetection: 0\n  });\n  return UITooltipComponent;\n})();\n;\nexport let UITooltipService = /*#__PURE__*/(() => {\n  class UITooltipService {\n    constructor() {\n      this.dimension$ = new Subject();\n      this.views$ = new Subject();\n    }\n\n    show(view, dimension) {\n      this.views$.next(view);\n      if (dimension) this.dimension$.next(dimension);\n    }\n\n    reshape(dimension) {\n      this.dimension$.next(dimension);\n    }\n\n    hide() {\n      this.views$.next(undefined);\n    }\n\n    updateTemplate(context) {\n      this.views$.next({\n        type: 'context',\n        context\n      });\n    }\n\n  }\n\n  UITooltipService.ɵfac = function UITooltipService_Factory(t) {\n    return new (t || UITooltipService)();\n  };\n\n  UITooltipService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UITooltipService,\n    factory: UITooltipService.ɵfac,\n    providedIn: 'root'\n  });\n  return UITooltipService;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
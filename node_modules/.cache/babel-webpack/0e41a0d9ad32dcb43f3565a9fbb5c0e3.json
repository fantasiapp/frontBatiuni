{"ast":null,"code":"import { takeUntil } from \"rxjs/operators\";\nimport { Destroy$ } from \"./classes\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst forms = {\n  FIELD_MISMATCH: '$1 doit être identique $2<().',\n  REQUIRED_FIELD: '$1=(Ce champ) est obligatoire.',\n  MIN_LENGTH: '$2=(Ce champ) doit contenir au moins $1=(8) caractères',\n  CASE: '$2=(Ce champ) doit contenir une lettre en $1=(miniscule)',\n  INVALID_FORMAT: 'Le format $1<() est invalide',\n  MESSAGE: '$1',\n  FIELD_TYPE: 'Ce champs attend $1.' //server: '$1'\n\n};\nexport function getFormErrorTemplate(name) {\n  const formAsObject = forms;\n  if (formAsObject.hasOwnProperty(name)) return formAsObject[name];\n  return null;\n}\n;\nconst arg_expr = /\\$(?:\\!|(\\d+))(?:(\\<|\\=)\\((.*?)\\))?/g;\nexport function build(template, ...args) {\n  arg_expr.lastIndex = 0; //reset regexp\n\n  let output = '',\n      lastMatch = null;\n\n  while (true) {\n    const match = arg_expr.exec(template);\n    if (!match) break;\n    const index = +match[1],\n          def = match[3],\n          arg = Number.isNaN(index) ? '$' : index ? args[index - 1] : template,\n          deleteLast = match[2] == '<' && !arg,\n          val = arg || def;\n    if (val === void 0) throw `Unable to evaluate template ${template}. Missing argument or default value.`;\n    output += template.slice(lastMatch ? lastMatch.index + lastMatch[0].length : 0, match.index - +deleteLast) + val;\n    lastMatch = match;\n  }\n\n  output += template.slice(lastMatch ? lastMatch.index + lastMatch[0].length : 0);\n  return output;\n}\n;\nexport let ErrorMessageComponent = /*#__PURE__*/(() => {\n  class ErrorMessageComponent {\n    constructor() {\n      this.message = '';\n    }\n\n    get classes() {\n      return 'error';\n    }\n\n  }\n\n  ErrorMessageComponent.ɵfac = function ErrorMessageComponent_Factory(t) {\n    return new (t || ErrorMessageComponent)();\n  };\n\n  ErrorMessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ErrorMessageComponent,\n    selectors: [[\"error-message\"]],\n    hostVars: 2,\n    hostBindings: function ErrorMessageComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.classes);\n      }\n    },\n    decls: 1,\n    vars: 1,\n    template: function ErrorMessageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵtextInterpolate1(\" \", ctx.message, \" \");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ErrorMessageComponent;\n})();\nexport let ControlErrorsDirective = /*#__PURE__*/(() => {\n  class ControlErrorsDirective extends Destroy$ {\n    constructor(control, view, resolver) {\n      super();\n      this.control = control;\n      this.view = view;\n      this.resolver = resolver;\n      this.novalidate = false;\n    }\n\n    displayErrors() {\n      this.view.clear();\n      const errors = this.control.errors;\n      if (!errors) return;\n      const errorNames = Object.keys(errors);\n\n      for (const name of errorNames) {\n        const template = getFormErrorTemplate(name);\n\n        if (template == null) {\n          console.warn(`Unknown form error \"${name}\"`);\n          return;\n        }\n\n        let err = build(template, ...errors[name]);\n        const factory = this.resolver.resolveComponentFactory(ErrorMessageComponent),\n              component = this.view.createComponent(factory);\n        component.instance.message = err;\n      }\n    }\n\n    ngOnInit() {\n      var _a;\n\n      if (this.novalidate) return;\n      (_a = this.control.statusChanges) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.displayErrors();\n      });\n      if (this.control.value) this.displayErrors();\n    }\n\n  }\n\n  ControlErrorsDirective.ɵfac = function ControlErrorsDirective_Factory(t) {\n    return new (t || ControlErrorsDirective)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n  };\n\n  ControlErrorsDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ControlErrorsDirective,\n    selectors: [[\"\", \"formControlName\", \"\"]],\n    inputs: {\n      novalidate: \"novalidate\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ControlErrorsDirective;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
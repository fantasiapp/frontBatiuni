{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Destroy$ } from \"../../common/classes\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction InfoHandler_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", \"assets/icons/\" + ctx_r0.type + \".png\", i0.ɵɵsanitizeUrl);\n  }\n}\n\nconst TRANSITION_TIME = 150;\nconst HEADER_HEIGHT = 60;\nconst PAGING_HEIGHT = 75;\nconst HEADER_SEARCH_HEIGHT = 150;\n\nfunction getHeight(top) {\n  if (top == 'header') return HEADER_HEIGHT;else if (top == 'paging') return PAGING_HEIGHT;\n  return HEADER_SEARCH_HEIGHT;\n}\n\nexport let InfoHandler = /*#__PURE__*/(() => {\n  class InfoHandler extends Destroy$ {\n    constructor(cd, service) {\n      super();\n      this.cd = cd;\n      this.service = service;\n      this.content = '';\n      this.time = 5000;\n      this.type = '';\n      this.fromService = false;\n      this.top = HEADER_HEIGHT;\n      this.alignStack = ['header']; //default\n\n      this.nextTimeout = null;\n    }\n\n    get alignTop() {\n      return `calc(env(safe-area-inset-top) + ${this.top}px)`;\n    }\n\n    ngOnInit() {\n      if (!this.fromService) return;\n      this.service.infos$.pipe(takeUntil(this.destroy$)).subscribe(info => {\n        if (info) this.show(info);else this.hide();\n      });\n      this.service.alignWith$.pipe(takeUntil(this.destroy$)).subscribe(alignWith => {\n        if (alignWith == 'last') {\n          this.alignStack.pop();\n          alignWith = this.alignStack[this.alignStack.length - 1];\n        } else this.alignStack.push(alignWith);\n\n        this.top = getHeight(alignWith);\n        this.cd.markForCheck();\n      });\n    }\n\n    resetTimer() {\n      if (this.nextTimeout) {\n        clearTimeout(this.nextTimeout);\n        this.nextTimeout = null;\n      }\n    }\n\n    createTimer(f, time) {\n      this.resetTimer();\n      this.nextTimeout = setTimeout(f, time);\n    }\n\n    show(info) {\n      if (!info.content) return;\n      this.resetTimer();\n      this.content = info.content;\n      this.type = info.type;\n      this.time = info.time || 2500;\n      this.cd.markForCheck();\n\n      if (this.time != Infinity) {\n        this.createTimer(() => {\n          this.hide(); //only works with markForCheck\n\n          this.cd.markForCheck();\n        }, this.time + TRANSITION_TIME);\n      }\n\n      this.cd.markForCheck();\n    }\n\n    hide() {\n      this.type = '';\n      this.content = '';\n      this.resetTimer();\n      this.cd.markForCheck();\n    }\n\n  }\n\n  InfoHandler.ɵfac = function InfoHandler_Factory(t) {\n    return new (t || InfoHandler)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(InfoService));\n  };\n\n  InfoHandler.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InfoHandler,\n    selectors: [[\"info\"]],\n    hostVars: 2,\n    hostBindings: function InfoHandler_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"top\", ctx.alignTop);\n      }\n    },\n    inputs: {\n      fromService: \"fromService\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 4,\n    consts: [[1, \"cover-parent\"], [3, \"src\", 4, \"ngIf\"], [3, \"src\"]],\n    template: function InfoHandler_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, InfoHandler_img_1_Template, 1, 1, \"img\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.type);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.type);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.content, \"\\n\");\n      }\n    },\n    directives: [i1.NgIf],\n    styles: [\"[_ngcontent-%COMP%]:root{--notification-size: $notification-size}.page-content-with-tabs[_ngcontent-%COMP%]{width:100%;overflow-y:auto;overflow-x:hidden;touch-action:pan-y!important}.page-content-with-tabs[_ngcontent-%COMP%]{margin-top:150px;margin-top:calc(constant(safe-area-inset-top) + 150px);margin-top:calc(env(safe-area-inset-top) + 150px);margin-bottom:0;margin-bottom:calc(constant(safe-area-inset-bottom) + 0);margin-bottom:calc(env(safe-area-inset-bottom) + 0);height:calc(100vh - 220px - env(safe-area-inset-bottom))}.invert[_ngcontent-%COMP%]{filter:invert(1)}[_nghost-%COMP%]{display:block;overflow:hidden;position:fixed;top:60px;top:calc(constant(safe-area-inset-top) + 60px);top:calc(env(safe-area-inset-top) + 60px);z-index:100000;width:100vw;height:30px;background-color:transparent;will-change:background-color;transition:background-color .15s linear 0s;font-family:\\\"Roboto\\\";font-weight:200;line-height:30px;text-align:center;color:#fff;pointer-events:none}img[_ngcontent-%COMP%]{position:absolute;left:40px;width:16px;height:16px;top:7px;filter:invert(1)}.error[_ngcontent-%COMP%], .success[_ngcontent-%COMP%], .info[_ngcontent-%COMP%]{opacity:1}.error[_ngcontent-%COMP%]{background-color:#c0392b}.success[_ngcontent-%COMP%]{background-color:#27ae60}.info[_ngcontent-%COMP%]{background-color:#2980b9}\"],\n    changeDetection: 0\n  });\n  return InfoHandler;\n})();\n;\nexport let InfoService = /*#__PURE__*/(() => {\n  class InfoService {\n    constructor() {\n      this.infos$ = new Subject();\n      this.alignWith$ = new Subject();\n    }\n\n    show(type, content, time = Infinity, alignWith) {\n      this.infos$.next({\n        type,\n        content,\n        time\n      });\n      if (alignWith) this.alignWith$.next(alignWith);\n    }\n\n    alignWith(alignWith) {\n      this.alignWith$.next(alignWith);\n    }\n\n    hide() {\n      this.infos$.next(null);\n    }\n\n    ngOnDestroy() {\n      this.infos$.complete();\n    }\n\n  }\n\n  InfoService.ɵfac = function InfoService_Factory(t) {\n    return new (t || InfoService)();\n  };\n\n  InfoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InfoService,\n    factory: InfoService.ɵfac,\n    providedIn: 'root'\n  });\n  return InfoService;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
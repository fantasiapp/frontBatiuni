{"ast":null,"code":"import { of } from \"rxjs\";\nimport { map, take } from \"rxjs/operators\";\nimport { DataQueries } from \"src/models/new/data.state\";\nimport { DownloadFile } from \"src/models/new/user/user.actions\";\nimport { b64toBlob, getFileType } from \"../common/functions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@ngxs/store\";\nexport let FileDownloader = /*#__PURE__*/(() => {\n  class FileDownloader {\n    constructor(sanitizer, store) {\n      this.sanitizer = sanitizer;\n      this.store = store;\n    }\n\n    toSecureBase64(file) {\n      //assume downloaded\n      if (!file.content) throw `Download file before using base64`;\n      return this.sanitizer.bypassSecurityTrustResourceUrl(`data:${getFileType(file.ext)};base64,${file.content}`);\n    }\n\n    createFileContext(file) {\n      const type = getFileType(file.ext),\n            blob = b64toBlob(Array.isArray(file.content) ? file.content[0] : file.content, type),\n            url = URL.createObjectURL(blob),\n            context = {\n        $implicit: {\n          type,\n          url,\n          safeUrl: this.sanitizer.bypassSecurityTrustResourceUrl(url),\n\n          close() {\n            this.url && URL.revokeObjectURL(this.url);\n          }\n\n        }\n      };\n      return context;\n    }\n\n    downloadFile(file) {\n      let id;\n      if (typeof file == 'number') id = file;else if (file.content) return of(file);else id = file.id;\n      return this.store.dispatch(new DownloadFile(id)).pipe(take(1), //will unsubscribe\n      map(_ => {\n        return this.store.selectSnapshot(DataQueries.getById('File', id));\n      }));\n    }\n\n  }\n\n  FileDownloader.ɵfac = function FileDownloader_Factory(t) {\n    return new (t || FileDownloader)(i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.Store));\n  };\n\n  FileDownloader.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileDownloader,\n    factory: FileDownloader.ɵfac\n  });\n  return FileDownloader;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
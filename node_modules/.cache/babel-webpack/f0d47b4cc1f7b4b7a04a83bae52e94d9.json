{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { UIDefaultAccessor } from \"../../common/classes\";\nimport * as i0 from \"@angular/core\";\nexport const ratingStarWidth = 25; //add to forms\n\nexport let UIStarsComponent = /*#__PURE__*/(() => {\n  class UIStarsComponent extends UIDefaultAccessor {\n    constructor(cd, ref) {\n      super(cd);\n      this.ref = ref;\n      this._number = 5;\n      this.step = 0.5; //between 0 - 1, how much of a step to push\n\n      this.threshold = 0.5;\n      this._toggleMode = false;\n    }\n\n    get emptyStarUrl() {\n      return `url(assets/starEmpty.svg)`;\n    }\n\n    get number() {\n      return this._number;\n    }\n\n    set number(x) {\n      this._number = Math.max(1, Math.floor(x));\n    }\n\n    get width() {\n      return this.number * ratingStarWidth + 'px';\n    }\n\n    get spanWidth() {\n      return +this._value * ratingStarWidth + 'px';\n    }\n\n    get fullStarUrl() {\n      return `url(assets/starFull.svg)`;\n    }\n\n    onClick(e) {\n      this.onChange(e);\n    }\n\n    set toggleOption(toggle) {\n      if (toggle) {\n        this.number = 1;\n        this.step = 1;\n        this.threshold = 0;\n        this._toggleMode = true;\n      }\n    }\n\n    getInput(e) {\n      if (this._toggleMode) {\n        //works with undefined so cool\n        return +!+this.value;\n      }\n\n      const rect = this.ref.nativeElement.getBoundingClientRect(),\n            q = 1 / this.step; //const value = Math.round((e.clientX - rect.x)/rect.width * (this.number * q)) / q;\n\n      const ratio = (e.clientX - rect.x) / rect.width * (this.number * q),\n            floor = Math.floor(ratio),\n            frac = ratio - floor,\n            value = frac >= this.threshold ? (floor + 1) / q : floor / q;\n      return value;\n    }\n\n  }\n\n  UIStarsComponent.ɵfac = function UIStarsComponent_Factory(t) {\n    return new (t || UIStarsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  UIStarsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UIStarsComponent,\n    selectors: [[\"stars\"]],\n    hostVars: 4,\n    hostBindings: function UIStarsComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function UIStarsComponent_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"background-image\", ctx.emptyStarUrl)(\"width\", ctx.width);\n      }\n    },\n    inputs: {\n      number: \"number\",\n      step: \"step\",\n      threshold: \"threshold\",\n      toggleOption: [\"toggle\", \"toggleOption\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: UIStarsComponent\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 4,\n    template: function UIStarsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"span\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"background-image\", ctx.fullStarUrl)(\"width\", ctx.spanWidth);\n      }\n    },\n    styles: [\"[_ngcontent-%COMP%]:root{--notification-size: $notification-size}span[_ngcontent-%COMP%], [_nghost-%COMP%]{display:inline-block;height:25px;background-position:0 0;background-repeat:repeat-x;background-size:25px 25px}[_nghost-%COMP%]{display:inline-block;overflow:hidden}\"],\n    changeDetection: 0\n  });\n  return UIStarsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
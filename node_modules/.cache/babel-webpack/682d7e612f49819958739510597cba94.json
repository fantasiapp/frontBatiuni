{"ast":null,"code":"import { lowerCase, number, phone, upperCase, url } from \"./regex\";\nexport const MatchField = (target, filed = target, ignoreCase = false) => {\n  return control => {\n    var _a;\n\n    const original = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.get(target),\n          originalValue = original && (ignoreCase ? original.value.toLowerCase() : original.value),\n          controlValue = ignoreCase ? control.value.toLowerCase() : control.value;\n    return original && originalValue == controlValue ? null : {\n      FIELD_MISMATCH: [filed]\n    };\n  };\n};\nexport const Required = (fieldname = '') => {\n  return control => {\n    let content = control === null || control === void 0 ? void 0 : control.value,\n        errors = {};\n    if (!content) errors['REQUIRED_FIELD'] = fieldname ? [fieldname] : [];\n    return Object.keys(errors).length ? errors : null;\n  };\n};\nexport const ComplexPassword = () => {\n  return control => {\n    let content = control === null || control === void 0 ? void 0 : control.value,\n        errors = {};\n    if (content.length < 8) errors['MIN_LENGTH'] = [];\n    if (!content.match(lowerCase)) errors['CASE'] = ['miniscule'];else if (!content.match(upperCase)) errors['CASE'] = ['majuscule'];\n    return Object.keys(errors).length ? errors : null;\n  };\n};\nexport const RequiredType = (type, error, ...args) => {\n  return control => {\n    let content = control.value,\n        errors = {};\n    if (typeof content != type) errors[error] = args;\n    return Object.keys(errors).length ? errors : null;\n  };\n};\nexport const Regexp = (regexp, error, args) => {\n  return control => {\n    let content = control.value,\n        errors = {};\n    if (!content.match(regexp)) errors[error] = args;\n    return Object.keys(errors).length ? errors : null;\n  };\n};\nexport const FieldType = (type, messages) => {\n  return control => {\n    let content = control.value,\n        errors = {};\n    if (!content) return control.errors;\n\n    if (type == 'number') {\n      if (!(typeof content == 'number' || content.match(number))) errors['FIELD_TYPE'] = messages || ['un nombre'];\n    } else if (type == 'phone') {\n      if (!content.replace(/\\s/g, '').match(phone)) errors['FIELD_TYPE'] = messages || ['un numéro de téléphone'];\n    } else {\n      if (!content.match(url)) errors['FIELD_TYPE'] = messages || ['un site web'];\n    }\n\n    return Object.keys(errors).length ? errors : null;\n  };\n};\nexport const TransferError = to => {\n  return control => {\n    var _a;\n\n    const target = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.get(to);\n    if (target) target.setErrors(control.errors);\n    return null;\n  };\n};\nexport const setErrors = (form, errors) => {\n  var _a;\n\n  if (!errors) return;\n  if (errors.all) form.setErrors({\n    server: errors.all\n  });\n  let errorFields = Object.keys(errors).filter(field => field != 'all');\n\n  for (let field of errorFields) {\n    (_a = form.get(field)) === null || _a === void 0 ? void 0 : _a.setErrors({\n      MESSAGE: [errors[field]]\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
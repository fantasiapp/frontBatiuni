{"ast":null,"code":"import { IndexBased } from \"src/app/shared/common/classes\";\nimport * as i0 from \"@angular/core\";\nexport let SlidesDirective = /*#__PURE__*/(() => {\n  class SlidesDirective extends IndexBased {\n    constructor(factoryResolver, view, cd) {\n      super();\n      this.factoryResolver = factoryResolver;\n      this.view = view;\n      this.cd = cd;\n      this.componentRef = {\n        element: null,\n        view: null\n      };\n      this.components = [];\n      this._type = 'component';\n      this.animate = true;\n    }\n\n    ngOnInit() {\n      let ref = this.componentRef = this.create(0);\n      this.view.insert(ref.view);\n    }\n\n    set slide(components) {\n      this.components = components;\n    }\n\n    set type(type) {\n      this._type = type;\n    }\n\n    create(index) {\n      return this._type == 'component' ? this.createComponent(index) : this.createTemplate(index, {});\n    }\n\n    createComponent(index) {\n      let type = this.components[index % this.components.length],\n          factory = this.factoryResolver.resolveComponentFactory(type),\n          componentRef = this.view.createComponent(factory);\n      return {\n        element: componentRef.location.nativeElement,\n        view: componentRef.hostView\n      };\n    }\n\n    createTemplate(index, ctx) {\n      let template = this.components[index % this.components.length];\n      let view = template.createEmbeddedView(ctx);\n      return {\n        element: view.rootNodes[0],\n        view\n      };\n    }\n\n    animateWithClass(element, className, callback) {\n      var _a;\n\n      (_a = element.classList) === null || _a === void 0 ? void 0 : _a.add(className);\n      let save = element.onanimationend;\n\n      element.onanimationend = e => {\n        save && save.call(element, e);\n        element.onanimationend = save;\n        callback === null || callback === void 0 ? void 0 : callback(element, e);\n        element.classList.remove(className);\n      };\n    }\n\n    slideIn(component, direction) {\n      if (!component.element) return;\n      this.animateWithClass(component.element, 'slide-in-' + direction); //remove old element\n\n      if (this.componentRef) this.animateWithClass(this.componentRef.element, 'slide-out-' + direction, () => {\n        this.view.remove(0);\n      });\n    }\n\n    indexChanged(k, animate = this.animate, done) {\n      k > 0 ? this.left(k, animate, done) : this.right(-k, animate, done);\n    }\n\n    left(k = 1, animate = this.animate, done) {\n      let next = Math.min(this.components.length - 1, this.index + k);\n\n      if (this.index != next) {\n        this._index = next;\n        let componentRef = this.create(this.index);\n        if (animate) this.slideIn(componentRef, \"left\");else this.view.remove(0);\n        this.componentRef = componentRef;\n        this.view.insert(componentRef.view);\n        this.cd.markForCheck();\n        done && done();\n      }\n    }\n\n    right(k = 1, animate = this.animate, done) {\n      let next = Math.max(0, this.index - k);\n\n      if (this.index != next) {\n        this._index = next;\n        let componentRef = this.create(this.index);\n        if (animate) this.slideIn(componentRef, \"right\");else this.view.remove(0);\n        this.componentRef = componentRef;\n        this.view.insert(componentRef.view);\n        this.cd.markForCheck();\n        done && done();\n      }\n    }\n\n    get first() {\n      return this.index == 0;\n    }\n\n    get last() {\n      return this.index == this.components.length - 1;\n    }\n\n  }\n\n  SlidesDirective.ɵfac = function SlidesDirective_Factory(t) {\n    return new (t || SlidesDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  SlidesDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SlidesDirective,\n    selectors: [[\"\", \"slides\", \"\"]],\n    inputs: {\n      slide: [\"slides\", \"slide\"],\n      type: \"type\",\n      animate: \"animate\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return SlidesDirective;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { UIDefaultAccessor } from \"src/app/shared/common/classes\";\nimport { makeid } from \"../../common/functions\";\nimport * as i0 from \"@angular/core\"; //try to make all components have radio like functionality\n\nexport class UIRadioboxAccessor extends UIDefaultAccessor {\n  constructor(cd, host) {\n    super(cd);\n    this.host = host;\n    this.controlName = '';\n  }\n\n  ngOnInit() {\n    this.host.name = this.host.name || this.controlName;\n    let items = UIRadioboxAccessor.map.get(this.host.name);\n    if (!items) UIRadioboxAccessor.map.set(this.host.name, items = []);\n    items.push(this);\n    this.subscription = this.host.selection.subscribe(next => {\n      const value = this.onChange(next);\n      this.writeValue(value);\n    });\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    let items = UIRadioboxAccessor.map.get(this.host.name),\n        index;\n    if (!items) return;\n    index = items.indexOf(this);\n    if (index >= 0) items.splice(index, 1);\n\n    if (items.length == 0) {\n      UIRadioboxAccessor.map.delete(this.host.name);\n    }\n  }\n\n  writeValue(value) {\n    let items = UIRadioboxAccessor.map.get(this.host.name);\n    items === null || items === void 0 ? void 0 : items.forEach(item => {\n      item.host.valueChange.emit(item.host.value = item.host.onselect == value);\n      item.host.forceUpdate();\n    });\n  }\n\n}\nUIRadioboxAccessor.map = new Map();\n\nUIRadioboxAccessor.ɵfac = function UIRadioboxAccessor_Factory(t) {\n  return new (t || UIRadioboxAccessor)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(UIRadioboxComponent));\n};\n\nUIRadioboxAccessor.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: UIRadioboxAccessor,\n  selectors: [[\"radiobox\", \"formControlName\", \"\"]],\n  inputs: {\n    controlName: [\"formControlName\", \"controlName\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n;\nexport let UIRadioboxComponent = /*#__PURE__*/(() => {\n  class UIRadioboxComponent {\n    constructor(cd) {\n      this.cd = cd;\n      this.name = '';\n      this.onselect = makeid(5); //compatibility\n\n      this.value = false;\n      this.valueChange = new EventEmitter(); //action used in accessors\n\n      this.selection = new EventEmitter();\n    }\n\n    onChange(e) {\n      this.valueChange.emit(this.value = true);\n      this.selection.emit(this.onselect);\n    }\n\n    forceUpdate() {\n      this.cd.markForCheck();\n    }\n\n  }\n\n  UIRadioboxComponent.ɵfac = function UIRadioboxComponent_Factory(t) {\n    return new (t || UIRadioboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  UIRadioboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UIRadioboxComponent,\n    selectors: [[\"radiobox\"]],\n    inputs: {\n      name: \"name\",\n      onselect: \"onselect\",\n      value: \"value\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      selection: \"selection\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: UIRadioboxAccessor\n    }])],\n    decls: 2,\n    vars: 3,\n    consts: [[\"type\", \"radio\", \"tabindex\", \"-1\", 3, \"value\", \"change\"]],\n    template: function UIRadioboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0);\n        i0.ɵɵlistener(\"change\", function UIRadioboxComponent_Template_input_change_0_listener($event) {\n          return ctx.onChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(1, \"span\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"value\", ctx.onselect);\n        i0.ɵɵattribute(\"name\", ctx.name || null)(\"checked\", ctx.value || null);\n      }\n    },\n    styles: [\"[_ngcontent-%COMP%]:root{--notification-size: $notification-size}[_nghost-%COMP%]{display:inline-block;position:relative;cursor:pointer;-webkit-user-select:none;user-select:none;width:25px;height:25px;vertical-align:middle;margin-right:8px}[_nghost-%COMP%] ~*{display:inline-block;vertical-align:middle}input[_ngcontent-%COMP%]{position:absolute;opacity:0;width:100%;height:100%}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:checked ~ span[_ngcontent-%COMP%]{box-shadow:none;background-color:#0d6191;border-color:#0d6191}span[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;display:none}input[_ngcontent-%COMP%]:checked ~ span[_ngcontent-%COMP%]:after{display:block}input[type=checkbox][_ngcontent-%COMP%] ~ span[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;border-radius:3px;background-color:#eee;box-shadow:inset 0 3px 5px #aaa}input[type=checkbox][_ngcontent-%COMP%] ~ span[_ngcontent-%COMP%]:after{left:9px;top:5px;width:5px;height:10px;border:solid white;border-width:0 3px 3px 0;transform:rotate(45deg)}input[type=radio][_ngcontent-%COMP%] ~ span[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;border-radius:50%;background-color:transparent;border:1px solid #333}input[type=radio][_ngcontent-%COMP%] ~ span[_ngcontent-%COMP%]:after{top:7.5px;left:7.5px;width:8px;height:8px;border-radius:50%;background:white}span[_ngcontent-%COMP%]{pointer-events:none}\"],\n    changeDetection: 0\n  });\n  return UIRadioboxComponent;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
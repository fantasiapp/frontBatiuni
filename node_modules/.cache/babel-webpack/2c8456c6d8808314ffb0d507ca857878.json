{"ast":null,"code":"import { PropertyTrap } from \"src/app/shared/common/classes\";\nimport { getDirtyValues } from \"src/app/shared/common/functions\";\nimport { availabilityToName } from \"../data.mapper\";\nexport let ChangeProfileType = /*#__PURE__*/(() => {\n  class ChangeProfileType {\n    constructor(type) {\n      this.type = type;\n    }\n\n  }\n\n  ChangeProfileType.type = '[User] Change Profile Type';\n  return ChangeProfileType;\n})();\n;\nexport let ChangeProfilePicture = /*#__PURE__*/(() => {\n  class ChangeProfilePicture {\n    constructor(src, name) {\n      this.name = name;\n      this.ext = '';\n      this.imageBase64 = '';\n      this.expirationDate = '2025-12-31';\n      this.action = 'changeUserImage';\n      this.ext = src.format;\n      this.imageBase64 = src.base64String;\n    }\n\n  }\n\n  ChangeProfilePicture.type = '[User] Change Profile Picture';\n  return ChangeProfilePicture;\n})();\n;\nexport let UploadImageSupervision = /*#__PURE__*/(() => {\n  class UploadImageSupervision {\n    constructor(src, missionId, taskId) {\n      this.missionId = missionId;\n      this.taskId = taskId;\n      this.ext = '';\n      this.imageBase64 = '';\n      this.action = 'uploadImageSupervision';\n      this.ext = src.format;\n      this.imageBase64 = src.base64String;\n    }\n\n  }\n\n  UploadImageSupervision.type = '[User] Upload Supervision Picture';\n  return UploadImageSupervision;\n})();\n;\nexport let ChangePassword = /*#__PURE__*/(() => {\n  class ChangePassword {\n    constructor(oldPwd, newPwd) {\n      this.oldPwd = oldPwd;\n      this.newPwd = newPwd;\n      this.action = 'modifyPwd';\n    }\n\n  }\n\n  ChangePassword.type = '[User] Change Password';\n  return ChangePassword;\n})();\n;\nexport let GetUserData = /*#__PURE__*/(() => {\n  class GetUserData {\n    constructor(token) {\n      this.token = token;\n      this.action = 'getUserData';\n    }\n\n  }\n\n  GetUserData.type = '[Data] Get User data';\n  return GetUserData;\n})();\n;\nexport let ModifyUserProfile = /*#__PURE__*/(() => {\n  class ModifyUserProfile {\n    //for now we mark job as dirty, but we should take it directly from the form\n    constructor({\n      profile,\n      form\n    }) {\n      this.action = 'modifyUser';\n      this.onlyFiles = false;\n      this.labelFiles = [];\n      this.adminFiles = {};\n      const changes = getDirtyValues(form);\n      if (Object.keys(changes).length == 0) return;\n      const jobsForm = changes['UserProfile.Company.JobForCompany'],\n            labelsForm = changes['UserProfile.Company.LabelForCompany'],\n            adminFiles = changes['UserProfile.Company.admin'];\n\n      if (jobsForm) {\n        changes['UserProfile.Company.JobForCompany'] = Object.values(jobsForm).map(({\n          job,\n          number\n        }) => [job.id, number]);\n      }\n\n      if (labelsForm) {\n        changes['UserProfile.Company.LabelForCompany'] = Object.values(labelsForm).map(({\n          label,\n          fileData\n        }) => [label.id, fileData.expirationDate]);\n        this.labelFiles = Object.values(labelsForm).map(({\n          fileData\n        }) => fileData);\n      }\n\n      if (adminFiles) {\n        const keys = Object.keys(adminFiles);\n\n        for (const key of keys) {\n          if (!adminFiles[key].content) continue;\n          this.adminFiles[key] = adminFiles[key];\n        }\n\n        delete changes['UserProfile.Company.admin'];\n      }\n\n      if (Object.keys(changes).length == 0) this.onlyFiles = true;\n      const proxy = new Proxy(this, PropertyTrap); //write directly on this object\n\n      proxy['UserProfile.id'] = profile.user.id;\n\n      for (const [field, value] of Object.entries(changes)) proxy[field] = value;\n    }\n\n  }\n\n  ModifyUserProfile.type = '[User] Change User Profile';\n  return ModifyUserProfile;\n})();\n;\nexport let UploadFile = /*#__PURE__*/(() => {\n  class UploadFile {\n    //tell JLW to unify formats\n    constructor(src, nature, name, category) {\n      this.action = 'uploadFile';\n      this.companyFile = true;\n      this.assignedId = -1;\n      this.fileBase64 = src.content;\n      this.expirationDate = src.expirationDate;\n      this.ext = src.ext;\n      this.name = name || src.nature;\n      this.nature = nature;\n\n      if (category) {\n        this.category = category;\n        this[category] = -1;\n      }\n\n      ;\n    }\n\n    get target() {\n      return this[this.category];\n    }\n\n    set target(x) {\n      this[this.category] = x;\n    }\n\n  }\n\n  UploadFile.type = '[File] Upload';\n  return UploadFile;\n})();\n;\nexport let TakePicture = /*#__PURE__*/(() => {\n  class TakePicture {\n    constructor(src, name, nature) {\n      this.name = name;\n      this.nature = nature;\n      this.ext = '';\n      this.fileBase64 = '';\n      this.expirationDate = '2025-12-31';\n      this.assignedId = -1;\n      this.action = 'takePicture';\n      this.fileBase64 = src.base64String;\n      this.expirationDate = '';\n      this.ext = src.format;\n      this.name = name;\n      this.nature = nature;\n    }\n\n  }\n\n  TakePicture.type = '[File] take Picture';\n  return TakePicture;\n})();\n;\nexport let DeleteFile = /*#__PURE__*/(() => {\n  class DeleteFile {\n    constructor(id) {\n      this.id = id;\n      this.action = 'deleteFile';\n      this.companyFile = true;\n    }\n\n  }\n\n  DeleteFile.type = '[File] Delete';\n  return DeleteFile;\n})();\n;\nexport let DownloadFile = /*#__PURE__*/(() => {\n  class DownloadFile {\n    constructor(id, notify = false) {\n      this.id = id;\n      this.notify = notify;\n      this.action = 'downloadFile';\n    }\n\n    get companyFile() {\n      return true;\n    }\n\n  }\n\n  DownloadFile.type = '[File] Download';\n  return DownloadFile;\n})();\n;\nexport let DeletePost = /*#__PURE__*/(() => {\n  class DeletePost {\n    constructor(id) {\n      this.id = id;\n      this.action = 'deletePost';\n    }\n\n  }\n\n  DeletePost.type = '[User.PME] Delete Post';\n  return DeletePost;\n})();\n;\nexport let UploadPost = /*#__PURE__*/(() => {\n  class UploadPost {\n    constructor(address, Job, numberOfPeople, dueDate, DatePost, manPower, counterOffer, hourlyStart, hourlyEnd, currency, description, amount, DetailedPost, files, draft, id) {\n      this.address = address;\n      this.Job = Job;\n      this.numberOfPeople = numberOfPeople;\n      this.dueDate = dueDate;\n      this.DatePost = DatePost;\n      this.manPower = manPower;\n      this.counterOffer = counterOffer;\n      this.hourlyStart = hourlyStart;\n      this.hourlyEnd = hourlyEnd;\n      this.currency = currency;\n      this.description = description;\n      this.amount = amount;\n      this.DetailedPost = DetailedPost;\n      this.files = files;\n      this.draft = draft;\n      this.id = id;\n      this.action = 'uploadPost';\n      if (this.id) this.action = 'modifyPost';else delete this['id'];\n    }\n\n    static fromPostForm(value, draft, id) {\n      var _a, _b, _c, _d;\n\n      const documents = value.documents.filter(doc => doc.fileData.content);\n      const files = {};\n      documents.forEach(doc => {\n        files[doc.name] = doc.fileData;\n      });\n      return new UploadPost(value.address, ((_b = (_a = value.job) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || 0, value.numberOfPeople, value.dueDate, value.calendar.map(day => day.date), typeof value.manPower == 'boolean' ? value.manPower : value.manPower == \"true\", value.counterOffer, value.hourlyStart, value.hourlyEnd, ((_d = (_c = value.currency) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.name) || '$', value.description, value.amount, value.detailedPost.map(detail => detail.description), files, draft, id);\n    }\n\n  }\n\n  UploadPost.type = '[User.PME] Create Post';\n  return UploadPost;\n})();\n;\nexport let SwitchPostType = /*#__PURE__*/(() => {\n  class SwitchPostType {\n    constructor(id) {\n      this.id = id;\n      this.action = 'switchDraft';\n    }\n\n  }\n\n  SwitchPostType.type = '[User.PME] Switch Post Type';\n  return SwitchPostType;\n})();\n;\nexport let DuplicatePost = /*#__PURE__*/(() => {\n  class DuplicatePost {\n    constructor(id) {\n      this.id = id;\n      this.action = 'duplicatePost';\n    }\n\n  }\n\n  DuplicatePost.type = '[User.PME] Duplicate Post';\n  return DuplicatePost;\n})();\n;\nexport let ModifyAvailability = /*#__PURE__*/(() => {\n  class ModifyAvailability {\n    constructor(disponibility) {\n      this.disponibility = disponibility;\n      this.action = 'modifyDisponibility';\n    }\n\n    static fromCalendar(calendar) {\n      return new ModifyAvailability(calendar.value.map(day => [day.date, availabilityToName(day.availability)]));\n    }\n\n  }\n\n  ModifyAvailability.type = '[User.ST] Modify Disponibility';\n  return ModifyAvailability;\n})();\n;\nexport let ApplyPost = /*#__PURE__*/(() => {\n  class ApplyPost {\n    constructor(Post, form) {\n      this.Post = Post;\n      this.action = 'applyPost';\n      this.amount = form.amount;\n      this.devis = form.devis;\n    }\n\n  }\n\n  ApplyPost.type = '[User.ST] Apply Post';\n  return ApplyPost;\n})();\nexport let GetGeneralData = /*#__PURE__*/(() => {\n  class GetGeneralData {\n    constructor() {\n      this.action = 'getGeneralData';\n    }\n\n  }\n\n  GetGeneralData.type = '[Data] Get General data';\n  return GetGeneralData;\n})();\n;\nexport let HandleApplication = /*#__PURE__*/(() => {\n  class HandleApplication {\n    constructor(Candidate, post, response) {\n      this.Candidate = Candidate;\n      this.post = post;\n      this.response = response;\n      this.action = 'handleCandidateForPost';\n    }\n\n  }\n\n  HandleApplication.type = '[Data] Handle Application';\n  return HandleApplication;\n})();\n;\nexport let SignContract = /*#__PURE__*/(() => {\n  class SignContract {\n    constructor(missionId, view) {\n      this.missionId = missionId;\n      this.view = view;\n      this.action = 'signContract';\n    }\n\n  }\n\n  SignContract.type = '[Data] Sign Contract';\n  return SignContract;\n})();\n;\nexport let CreateDetailedPost = /*#__PURE__*/(() => {\n  class CreateDetailedPost {\n    constructor(missionId, content, date) {\n      this.missionId = missionId;\n      this.content = content;\n      this.date = date;\n      this.action = 'createDetailedPost';\n    }\n\n  }\n\n  CreateDetailedPost.type = '[Data] Create DetailedPost';\n  return CreateDetailedPost;\n})();\nexport let ModifyDetailedPost = /*#__PURE__*/(() => {\n  class ModifyDetailedPost {\n    constructor(detailedPost) {\n      this.detailedPost = detailedPost;\n      this.action = 'modifyDetailedPost';\n    }\n\n  }\n\n  ModifyDetailedPost.type = '[Data] Modify DetailedPost';\n  return ModifyDetailedPost;\n})();\nexport let CreateSupervision = /*#__PURE__*/(() => {\n  class CreateSupervision {\n    constructor(missionId, detailedPostId, parentId, comment, date) {\n      this.missionId = missionId;\n      this.detailedPostId = detailedPostId;\n      this.parentId = parentId;\n      this.comment = comment;\n      this.date = date;\n      this.action = 'createSupervision';\n    }\n\n  }\n\n  CreateSupervision.type = '[Data] Create Supervision';\n  return CreateSupervision;\n})();\nexport let SetFavorite = /*#__PURE__*/(() => {\n  class SetFavorite {\n    constructor(value, Post) {\n      this.value = value;\n      this.Post = Post;\n      this.action = 'setFavorite';\n    }\n\n  }\n\n  SetFavorite.type = '[User.ST] Set Favorite';\n  return SetFavorite;\n})();\nexport let MarkViewed = /*#__PURE__*/(() => {\n  class MarkViewed {\n    constructor(Post) {\n      this.Post = Post;\n      this.action = 'isViewed';\n    }\n\n  }\n\n  MarkViewed.type = '[User.ST] View Post';\n  return MarkViewed;\n})();\n; // export class ContractSignature {\n//   static readonly type = '[User] Contract Signature';\n//   action = 'downloadContract';\n//   constructor(public Mission: number) {}\n// };","map":null,"metadata":{},"sourceType":"module"}
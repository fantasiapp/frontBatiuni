{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UIDefaultAccessor } from '../../common/classes';\nimport * as moment from 'moment';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filterSplit } from '../../common/functions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction CalendarUI_li_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const day_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(2, 1, day_r2, 0, 1));\n  }\n}\n\nfunction CalendarUI_li_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 12);\n    i0.ɵɵlistener(\"click\", function CalendarUI_li_13_Template_li_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const index_r6 = restoredCtx.index;\n      const day_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onDayClicked(index_r6, day_r4.date, $event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const day_r4 = ctx.$implicit;\n    const first_r5 = ctx.first;\n    i0.ɵɵclassMap(day_r4.availability);\n    i0.ɵɵstyleProp(\"grid-column-start\", first_r5 ? day_r4 == null ? null : day_r4.indexWeek : \"auto\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", day_r4 == null ? null : day_r4.value, \" \");\n  }\n}\n\n;\nexport let CalendarUI = /*#__PURE__*/(() => {\n  class CalendarUI extends UIDefaultAccessor {\n    constructor(cd) {\n      super(cd);\n      this.embedded = true;\n      this.mode = 'single';\n      this.rangeStart = null;\n      this.dayClick = new EventEmitter();\n      this.week = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\"];\n      this.monthSelect = [];\n      this.selection = [];\n      this.currentMonth = 0;\n      this.currentYear = 0;\n      let now = new Date(Date.now());\n      this.currentMonth = now.getMonth() + 1;\n      this.currentYear = now.getFullYear();\n      this.value = [];\n    }\n\n    fillZero(month) {\n      if (month < 10) return '0' + month;\n      return month;\n    }\n\n    viewCurrentDate() {\n      let now = new Date(Date.now());\n      this.currentMonth = now.getMonth() + 1;\n      this.currentYear = now.getFullYear();\n      this.getDaysFromDate(this.fillZero(this.currentMonth), this.currentYear);\n    }\n\n    getDaysFromDate(month, year) {\n      const startDate = moment.utc(`${year}/${month}/01`, \"YYYY-MM-DD\");\n      const endDate = startDate.clone().endOf('month');\n      this.dateSelect = startDate.locale('fr');\n      const diffDays = endDate.diff(startDate, 'days', true);\n      const numberDays = Math.round(diffDays);\n      const arrayDays = Object.keys([...Array(numberDays)]).map((a, i) => {\n        var _a;\n\n        a = this.fillZero(parseInt(a) + 1);\n        const dayObject = moment(`${year}/${month}/${a}`, \"YYYY-MM-DD\");\n        const compareDate = moment(`${year}-${month}-${a}`, \"YYYY-MM-DD\");\n        let flow = compareDate;\n\n        let item = this._value.filter(item => item.date == flow._i);\n\n        return {\n          name: dayObject.format(\"dddd\"),\n          value: a,\n          date: flow._i,\n          indexWeek: dayObject.isoWeekday(),\n          availability: (_a = item[0]) === null || _a === void 0 ? void 0 : _a.availability\n        };\n      });\n      this.monthSelect = arrayDays;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(v) {\n      this._value = v || [];\n      this.getDaysFromDate(this.fillZero(this.currentMonth), this.currentYear);\n    }\n\n    changeMonth(flag) {\n      const nextDate = flag < 0 ? this.dateSelect.clone().subtract(1, \"month\") : this.dateSelect.clone().add(1, \"month\");\n      this.currentMonth = nextDate.get('M') + 1;\n      this.currentYear = nextDate.get('Y');\n      this.getDaysFromDate(this.fillZero(this.currentMonth), this.currentYear);\n      this.rangeStart = null; //cancel selection\n    }\n\n    onDayClicked(index, day, e) {\n      //e shouldnt be passed, it should be the host responsibility\n      //set click listener on the host and when the emitted event occurs\n      //read the value and show what needs to be shown\n      console.log(this.rangeStart);\n\n      if (this.rangeStart !== null) {\n        const min = Math.min(this.rangeStart, index),\n              max = Math.max(this.rangeStart, index);\n        const selection = [];\n\n        for (let i = min; i <= max; i++) selection.push(this.monthSelect[i].date);\n\n        this.setSelection(selection);\n        this.rangeStart = null;\n      } else {\n        //first click\n        if (this.mode == 'range') this.rangeStart = index;else {\n          this.setSelection([day]);\n          this.dayClick.emit([e, this.selection]);\n        }\n      }\n    }\n\n    setSelection(days) {\n      this.selection = days;\n      if (!this.embedded) this.mode == 'single' ? this.toggleDayState(this.selection[0], 'selected') : this.addValues(this.selection, 'selected');\n    }\n\n    setCurrentDayState(state) {\n      const remaining = this.value.filter(item => item.date !== this.selection[0]);\n      let next;\n\n      if (state != 'nothing') {\n        next = [...remaining, {\n          date: this.selection[0],\n          availability: state\n        }];\n      } else {\n        next = remaining;\n      }\n\n      this.onChange(next);\n      this.cd.markForCheck();\n    }\n\n    toggleDayState(day, targetState) {\n      const [[current], remaining] = filterSplit(this.value, item => item.date == day);\n      let next;\n\n      if (current) {\n        next = remaining;\n      } else {\n        next = [...remaining, {\n          date: day,\n          availability: targetState\n        }];\n      }\n\n      this.onChange(next);\n      this.cd.markForCheck();\n    }\n\n    addValues(days, targetState) {\n      //delete the overlap, it should take the new value\n      const currentDates = this.value.map(day => day.date),\n            remaining1 = currentDates.filter(knownDate => !days.includes(knownDate)),\n            remaining2 = days.filter(day => !currentDates.includes(day));\n      this.onChange([...remaining1, ...remaining2].map(date => ({\n        date,\n        availability: targetState\n      })));\n      this.cd.markForCheck();\n    } //write value\n\n\n    writeValue(value) {\n      if (value.length) {\n        if (typeof value[0] == 'string') {\n          super.writeValue(value.map(date => ({\n            date,\n            availability: 'selected'\n          })));\n        } else super.writeValue(value);\n      } else super.writeValue(value);\n    }\n\n  }\n\n  CalendarUI.ɵfac = function CalendarUI_Factory(t) {\n    return new (t || CalendarUI)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  CalendarUI.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendarUI,\n    selectors: [[\"calendar\"]],\n    hostAttrs: [1, \"flex\", \"center\"],\n    inputs: {\n      embedded: \"embedded\",\n      mode: \"mode\"\n    },\n    outputs: {\n      dayClick: \"dayClick\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: CalendarUI\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 14,\n    vars: 5,\n    consts: [[1, \"calendar\", \"flex\", \"center\"], [1, \"header-calendar\", \"full-width\", \"flex\", \"center\"], [1, \"calendar-action\", \"flex\"], [1, \"btn-prev\", 3, \"click\"], [\"src\", \"assets/arrowleft.svg\"], [1, \"btn-next\", 3, \"click\"], [\"src\", \"assets/arrowright.svg\"], [1, \"wrapper-calendar\", \"full-width\"], [1, \"grid\"], [\"class\", \"day-name center-text\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"center-text\", 3, \"gridColumnStart\", \"class\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"day-name\", \"center-text\"], [1, \"center-text\", 3, \"click\"]],\n    template: function CalendarUI_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h1\");\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"titlecase\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function CalendarUI_Template_button_click_6_listener() {\n          return ctx.changeMonth(-1);\n        });\n        i0.ɵɵelement(7, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CalendarUI_Template_button_click_8_listener() {\n          return ctx.changeMonth(1);\n        });\n        i0.ɵɵelement(9, \"img\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelementStart(11, \"ol\", 8);\n        i0.ɵɵtemplate(12, CalendarUI_li_12_Template, 3, 5, \"li\", 9);\n        i0.ɵɵtemplate(13, CalendarUI_li_13_Template, 2, 5, \"li\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 3, ctx.dateSelect.format(\"MMMM, yyyy\")));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.week);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.monthSelect);\n      }\n    },\n    directives: [i1.NgForOf],\n    pipes: [i1.TitleCasePipe, i1.SlicePipe],\n    styles: [\".page-content-with-tabs[_ngcontent-%COMP%]{width:100%;overflow-y:auto;overflow-x:hidden;touch-action:pan-y!important}.page-content-with-tabs[_ngcontent-%COMP%]{margin-top:150px;margin-top:calc(constant(safe-area-inset-top) + 150px);margin-top:calc(env(safe-area-inset-top) + 150px);margin-bottom:0;margin-bottom:calc(constant(safe-area-inset-bottom) + 0);margin-bottom:calc(env(safe-area-inset-bottom) + 0);height:calc(100vh - 220px - env(safe-area-inset-bottom))}.invert[_ngcontent-%COMP%]{filter:invert(1)}[_ngcontent-%COMP%]:root{--notification-size: $notification-size}[_nghost-%COMP%]{font-family:\\\"Roboto\\\";display:block;width:100%}.calendar[_ngcontent-%COMP%]{flex-flow:column;width:100%}.header-calendar[_ngcontent-%COMP%]{align-content:center;justify-content:space-between}.header-calendar[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{color:#1e2843}.wrapper-calendar[_ngcontent-%COMP%]{margin:.25rem;border-radius:15px;box-shadow:#63636333 0 2px 8px;background-color:#fafafa;padding:10px}.wrapper-calendar[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{height:25px;width:25px;font-size:.8rem;cursor:pointer;text-align:center;line-height:25px;color:#1e2843}ol[_ngcontent-%COMP%]{grid-row-gap:1rem;row-gap:1rem;list-style:none;display:grid;grid-template-columns:repeat(7,1fr);margin:0;padding:0}h2[_ngcontent-%COMP%]{margin-bottom:4px;padding:0}.day-name[_ngcontent-%COMP%]{font-size:14px;margin-bottom:2px;text-align:center}.calendar-action[_ngcontent-%COMP%]{justify-content:space-around}.calendar-action[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{height:1.5em}.header-calendar[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{width:100%;font-size:14px}.header-calendar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{cursor:pointer;background-color:transparent;border:0}  .nothing,   .selected,   .unavailable,   .availablelimits,   .available{color:#fff!important;border-radius:50%}  .available{background-color:#b9edaf}  .availablelimits{background-color:#ffc425}  .unavailable{background-color:#e80000}  .selected{background-color:#1e2843}  .nothing{background-color:#fff}\"],\n    changeDetection: 0\n  });\n  return CalendarUI;\n})();","map":null,"metadata":{},"sourceType":"module"}
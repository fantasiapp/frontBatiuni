{"ast":null,"code":"import { addValues, addRecord, update } from \"./state.operators\";\nimport { patch } from '@ngxs/store/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngxs/store\";\nexport const NameMapping = {\n  'JobForCompany': 'jobs',\n  'LabelForCompany': 'labels',\n  'Role': 'role',\n  'Job': 'job',\n  'Label': 'label',\n  'UserProfile': 'user',\n  'Company': 'company',\n  'File': 'files',\n  'Post': 'posts',\n  'userName': 'username',\n  'Candidate': 'candidates',\n  'DetailedPost': 'details',\n  'Supervision': 'supervisions',\n  'Disponibility': 'availabilities',\n  'Mission': 'missions',\n  'DatePost': 'dates',\n  'FavoritePost': 'favoritePosts',\n  'ViewPost': 'viewedPosts'\n};\nconst ReverseMapping = {\n  'jobs': 'JobForCompany',\n  'labels': 'LabelForCompany',\n  'role': 'Role',\n  'job': 'Job',\n  'label': 'Label',\n  'user': 'UserProfile',\n  'company': 'Company',\n  'files': 'File',\n  'file': 'File',\n  'posts': 'Post',\n  'username': 'userName',\n  'candidates': 'Candidate',\n  'details': 'DetailedPost',\n  'supervisions': 'Supervision',\n  'availabilities': 'Disponibility',\n  'missions': 'Mission',\n  'dates': 'DatePost',\n  'favoritePosts': 'FavoritePost',\n  'viewedPosts': 'ViewPost'\n};\nexport function getOriginalName(name) {\n  return ReverseMapping[name] || name;\n}\n;\nexport function availabilityToName(availability) {\n  if (availability == 'available') return 'Disponible';else if (availability == 'availablelimits') return 'Disponible Sous Conditions';else if (availability == 'unavailable') return 'Non Disponible';\n  return availability;\n}\n;\nexport function nameToAvailability(name) {\n  if (name == 'Disponible') return 'available';else if (name == 'Disponible Sous Conditions') return 'availablelimits';else return 'unavailable';\n}\nexport let DataReader = /*#__PURE__*/(() => {\n  class DataReader {\n    constructor(store) {\n      this.store = store;\n    }\n\n    getFieldIndex(data, type, child) {\n      //HACK\n      return data[type + 'Fields'].indexOf(child);\n    }\n\n    getValueById(data, type, id) {\n      return data[type + 'Values'][id];\n    }\n\n    getField(data, type, id, child) {\n      const index = this.getFieldIndex(data, type, child);\n      return this.getValueById(data, type, id)[index];\n    }\n\n    readCurrentUserId(data) {\n      return data['currentUser'];\n    }\n\n    readCurrentUser(data) {\n      const id = this.readCurrentUserId(data);\n      return this.getValueById(data, 'UserProfile', id);\n    }\n\n    readCurrentCompanyId(data) {\n      const userId = this.readCurrentUserId(data);\n      return this.getField(data, 'UserProfile', userId, 'Company');\n    }\n\n    readCurrentCompany(data) {\n      const id = this.readCurrentCompanyId(data);\n      return this.getValueById(data, 'Company', id);\n    }\n\n    readStaticData(data) {\n      const suffix = 'Values',\n            keys = Object.keys(data),\n            names = keys.map(key => key.slice(0, -suffix.length)),\n            operations = names.map((name, i) => addValues(name, data[keys[i]]));\n      return operations;\n    }\n\n    readInitialData(data) {\n      const suffix = 'Values',\n            keys = Object.keys(data).filter(key => key.endsWith('Values')),\n            names = keys.map(key => key.slice(0, -suffix.length)),\n            operations = names.map((name, i) => addRecord(name, data[name + 'Fields'], data[keys[i]]));\n      return operations;\n    }\n\n    readCurrentSession(data) {\n      const companyId = this.readCurrentCompanyId(data),\n            roles = this.getField(data, 'Company', companyId, 'Role');\n      return patch({\n        session: {\n          currentUser: data['currentUser'],\n          view: roles == 2 ? 'PME' : 'ST'\n        }\n      });\n    }\n\n    readUpdates(data) {\n      console.log(\"readUpdates\", data);\n      return Object.keys(data).map(name => update(name, data[name]));\n    }\n\n  }\n\n  DataReader.ɵfac = function DataReader_Factory(t) {\n    return new (t || DataReader)(i0.ɵɵinject(i1.Store));\n  };\n\n  DataReader.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataReader,\n    factory: DataReader.ɵfac,\n    providedIn: 'root'\n  });\n  return DataReader;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} items - Specific items to append to the end of an array\r\n * @return {?}\r\n */\nfunction append(items) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function appendOperator(existing) {\n      // If `items` is `undefined` or `null` or `[]` but `existing` is provided\n      // just return `existing`\n\n      /** @type {?} */\n      const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\n\n      if (itemsNotProvidedButExistingIs) {\n        return (\n          /** @type {?} */\n          existing\n        );\n      }\n\n      if (Array.isArray(existing)) {\n        return existing.concat(\n        /** @type {?} */\n        items);\n      } // For example if some property is added dynamically\n      // and didn't exist before thus it's not `ArrayLike`\n\n\n      return (\n        /** @type {?} */\n        items\n      );\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {...?} operators\r\n * @return {?}\r\n */\n\n\nfunction compose(...operators) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function composeOperator(existing) {\n      return operators.reduce(\n      /**\r\n      * @param {?} accumulator\r\n      * @param {?} operator\r\n      * @return {?}\r\n      */\n      (accumulator, operator) => operator(accumulator), existing);\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\n\n\nfunction isStateOperator(value) {\n  return typeof value === 'function';\n}\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\n\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\n\n\nfunction isPredicate(value) {\n  return typeof value === 'function';\n}\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\n\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n/**\r\n * @param {?} index\r\n * @return {?}\r\n */\n\n\nfunction invalidIndex(index) {\n  return Number.isNaN(index) || index === -1;\n}\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\n\n\nfunction isNil(value) {\n  return value === null || isUndefined(value);\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} operatorOrValue\r\n * @param {?=} existing\r\n * @return {?}\r\n */\n\n\nfunction retrieveValue(operatorOrValue, existing) {\n  // If state operator is a function\n  // then call it with an original value\n  if (isStateOperator(operatorOrValue)) {\n    /** @type {?} */\n    const value = operatorOrValue(\n    /** @type {?} */\n\n    /** @type {?} */\n    existing);\n    return (\n      /** @type {?} */\n      value\n    );\n  } // If operator or value was not provided\n  // e.g. `elseOperatorOrValue` is `undefined`\n  // then we just return an original value\n\n\n  if (isUndefined(operatorOrValue)) {\n    return (\n      /** @type {?} */\n\n      /** @type {?} */\n\n      /** @type {?} */\n      existing\n    );\n  }\n\n  return (\n    /** @type {?} */\n    operatorOrValue\n  );\n}\n/**\r\n * @template T\r\n * @param {?} condition - Condition can be a plain boolean value or a function,\r\n * that returns boolean, also this function can take a value as an argument\r\n * to which this state operator applies\r\n * @param {?} trueOperatorOrValue - Any value or a state operator\r\n * @param {?=} elseOperatorOrValue - Any value or a state operator\r\n * @return {?}\r\n */\n\n\nfunction iif(condition, trueOperatorOrValue, elseOperatorOrValue) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function iifOperator(existing) {\n      // Convert the value to a boolean\n\n      /** @type {?} */\n      let result = !!condition; // but if it is a function then run it to get the result\n\n      if (isPredicate(condition)) {\n        result = condition(existing);\n      }\n\n      if (result) {\n        return retrieveValue(trueOperatorOrValue,\n        /** @type {?} */\n        existing);\n      }\n\n      return retrieveValue(\n      /** @type {?} */\n      elseOperatorOrValue,\n      /** @type {?} */\n      existing);\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} value - Value to insert\r\n * @param {?=} beforePosition\r\n * @return {?}\r\n */\n\n\nfunction insertItem(value, beforePosition) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function insertItemOperator(existing) {\n      // Have to check explicitly for `null` and `undefined`\n      // because `value` can be `0`, thus `!value` will return `true`\n      if (isNil(value) && existing) {\n        return (\n          /** @type {?} */\n          existing\n        );\n      } // Property may be dynamic and might not existed before\n\n\n      if (!Array.isArray(existing)) {\n        return [\n        /** @type {?} */\n        value];\n      }\n      /** @type {?} */\n\n\n      const clone = existing.slice();\n      /** @type {?} */\n\n      let index = 0; // No need to call `isNumber`\n      // as we are checking `> 0` not `>= 0`\n      // everything except number will return false here\n\n      if (\n      /** @type {?} */\n      beforePosition > 0) {\n        index =\n        /** @type {?} */\n        beforePosition;\n      }\n\n      clone.splice(index, 0,\n      /** @type {?} */\n      value);\n      return clone;\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} patchObject\r\n * @return {?}\r\n */\n\n\nfunction patch(patchObject) {\n  return (\n    /**\r\n    * @template U\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function patchStateOperator(existing) {\n      /** @type {?} */\n      let clone = null;\n\n      for (const k in patchObject) {\n        /** @type {?} */\n        const newValue = patchObject[k];\n        /** @type {?} */\n\n        const existingPropValue = existing[k];\n        /** @type {?} */\n\n        const newPropValue = isStateOperator(newValue) ? newValue(\n        /** @type {?} */\n        existingPropValue) : newValue;\n\n        if (newPropValue !== existingPropValue) {\n          if (!clone) {\n            clone = Object.assign({},\n            /** @type {?} */\n            existing);\n          }\n\n          clone[k] = newPropValue;\n        }\n      }\n\n      return clone || existing;\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} selector - Index of item in the array or a predicate function\r\n * that can be provided in `Array.prototype.findIndex`\r\n * @param {?} operatorOrValue - New value under the `selector` index or a\r\n * function that can be applied to an existing value\r\n * @return {?}\r\n */\n\n\nfunction updateItem(selector, operatorOrValue) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function updateItemOperator(existing) {\n      /** @type {?} */\n      let index = -1;\n\n      if (isPredicate(selector)) {\n        index = existing.findIndex(selector);\n      } else if (isNumber(selector)) {\n        index = selector;\n      }\n\n      if (invalidIndex(index)) {\n        return (\n          /** @type {?} */\n          existing\n        );\n      }\n      /** @type {?} */\n\n\n      let value =\n      /** @type {?} */\n      null; // Need to check if the new item value will change the existing item value\n      // then, only if it will change it then clone the array and set the item\n\n      if (isStateOperator(operatorOrValue)) {\n        value = operatorOrValue(\n        /** @type {?} */\n        existing[index]);\n      } else {\n        value = operatorOrValue;\n      } // If the value hasn't been mutated\n      // then we just return `existing` array\n\n\n      if (value === existing[index]) {\n        return (\n          /** @type {?} */\n          existing\n        );\n      }\n      /** @type {?} */\n\n\n      const clone = existing.slice();\n      clone[index] =\n      /** @type {?} */\n      value;\n      return clone;\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} selector - index or predicate to remove an item from an array by\r\n * @return {?}\r\n */\n\n\nfunction removeItem(selector) {\n  return (\n    /**\r\n    * @param {?} existing\r\n    * @return {?}\r\n    */\n    function removeItemOperator(existing) {\n      /** @type {?} */\n      let index = -1;\n\n      if (isPredicate(selector)) {\n        index = existing.findIndex(selector);\n      } else if (isNumber(selector)) {\n        index = selector;\n      }\n\n      if (invalidIndex(index)) {\n        return (\n          /** @type {?} */\n          existing\n        );\n      }\n      /** @type {?} */\n\n\n      const clone = existing.slice();\n      clone.splice(index, 1);\n      return clone;\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { append, compose, iif, insertItem, isStateOperator, patch, removeItem, updateItem }; //# sourceMappingURL=ngxs-store-operators.js.map","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/jlw/Documents/frontBatiuni/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { take } from \"rxjs/operators\";\nimport { Destroy$ } from \"src/app/shared/common/classes\";\nimport { Login } from \"src/models/auth/auth.actions\";\nimport { setErrors } from \"src/validators/verify\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngxs/store\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../common/formerrors\";\nimport * as i5 from \"@angular/common\";\n\nfunction ConnexionForm_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \"Format invalide.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConnexionForm_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.loginForm.get(\"email\").errors == null ? null : ctx_r1.loginForm.get(\"email\").errors.server, \" \");\n  }\n}\n\nfunction ConnexionForm_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.loginForm.errors == null ? null : ctx_r2.loginForm.errors.server, \" \");\n  }\n}\n\nconst _c0 = function () {\n  return [\"\", \"mail\"];\n};\n\nconst _c1 = function () {\n  return [\"\", \"register\"];\n};\n\nexport let ConnexionForm = /*#__PURE__*/(() => {\n  class ConnexionForm extends Destroy$ {\n    constructor(router, store, cd) {\n      super();\n      this.router = router;\n      this.store = store;\n      this.cd = cd;\n      this.loginForm = new FormGroup({\n        email: new FormControl('', [Validators.required // Email()\n        ]),\n        password: new FormControl('', [Validators.required // ComplexPassword()\n        ])\n      }, {});\n      this._errors = [];\n    }\n\n    get errors() {\n      return this._errors;\n    }\n\n    onSubmit(e) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let {\n          email,\n          password\n        } = _this.loginForm.value;\n\n        _this.store.dispatch(new Login(email, password)).pipe(take(1)).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (success) {\n            const result = yield _this.router.navigate(['', 'home']);\n\n            if (!result) {\n              setErrors(_this.loginForm, {\n                all: 'Erreur inattendue. (500 ?)'\n              });\n\n              _this.cd.markForCheck();\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(), errors => {\n          setErrors(_this.loginForm, errors);\n\n          _this.cd.markForCheck();\n        });\n      })();\n    }\n\n  }\n\n  ConnexionForm.ɵfac = function ConnexionForm_Factory(t) {\n    return new (t || ConnexionForm)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  ConnexionForm.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConnexionForm,\n    selectors: [[\"connexion-form\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 21,\n    vars: 9,\n    consts: [[1, \"full-height\", \"form-control\", \"curved-border\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-title\"], [1, \"form-input\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-element\"], [\"class\", \"error\", 4, \"ngIf\"], [\"class\", \"server-error\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-element\"], [1, \"external-links\", \"form-links\", \"block\", \"text-right\", 3, \"routerLink\"], [1, \"form-action\", 2, \"margin-top\", \"auto\"], [1, \"button\", \"discover\", \"gradient\", 2, \"width\", \"250px\", 3, \"disabled\"], [1, \"external-links\", \"form-links\", \"block\", \"center-text\", 3, \"routerLink\"], [1, \"error\"], [1, \"server-error\"]],\n    template: function ConnexionForm_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ConnexionForm_Template_form_ngSubmit_0_listener($event) {\n          return ctx.onSubmit($event);\n        });\n        i0.ɵɵelementStart(1, \"h3\", 1);\n        i0.ɵɵtext(2, \"Je me connecte\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"label\");\n        i0.ɵɵtext(5, \"Adresse e-mail contact\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵtemplate(7, ConnexionForm_div_7_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(8, ConnexionForm_div_8_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2);\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵtext(11, \"Mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"a\", 7);\n        i0.ɵɵtext(14, \" Mot de passe oubli\\u00E9 ! \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 8);\n        i0.ɵɵtemplate(16, ConnexionForm_div_16_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementStart(17, \"button\", 9);\n        i0.ɵɵtext(18, \"Se connecter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"a\", 10);\n        i0.ɵɵtext(20, \" Je cr\\u00E9e un compte ! \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"email\").errors == null ? null : ctx.loginForm.get(\"email\").errors.email);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"email\").errors == null ? null : ctx.loginForm.get(\"email\").errors.server);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(7, _c0));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.errors == null ? null : ctx.loginForm.errors.server);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.loginForm.touched || ctx.loginForm.status === \"INVALID\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(8, _c1));\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i4.ControlErrorsDirective, i5.NgIf, i1.RouterLinkWithHref],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return ConnexionForm;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
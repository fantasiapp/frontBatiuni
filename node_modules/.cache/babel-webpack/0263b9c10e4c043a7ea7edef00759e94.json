{"ast":null,"code":"export function nullable(x) {\n  return !x;\n}\nexport function nonNullable(x) {\n  return !!x;\n}\nexport function filterMap(array, mapping) {\n  return array.map(mapping).filter(nonNullable);\n}\n;\nexport function filterSplit(array, pred) {\n  let accepted = [],\n      rejected = [];\n  array.forEach(x => {\n    if (pred(x)) accepted.push(x);else rejected.push(x);\n  });\n  return [accepted, rejected];\n}\n;\nexport function splitByOutput(array, classify) {\n  const mapping = new Map();\n  array.forEach(x => {\n    const output = classify(x),\n          xs = mapping.get(output) || [];\n    xs.push(x);\n    mapping.set(output, xs);\n  });\n  return mapping;\n}\n;\nexport function getByValue(map, searchValue) {\n  for (let [key, value] of map.entries()) {\n    if (value === searchValue) return key;\n  }\n\n  return null;\n}\n;\nexport function assignCopy(original, values) {\n  const prototype = Object.getPrototypeOf(original),\n        copy = Object.create(prototype);\n  return Object.assign(copy, original, values);\n}\n;\nexport function getDirtyValues(form, deep = false) {\n  let dirtyValues = {};\n  Object.keys(form.controls).forEach(key => {\n    let currentControl = form.controls[key];\n\n    if (currentControl.dirty) {\n      if (currentControl.controls) dirtyValues[key] = deep ? getDirtyValues(currentControl, deep) : currentControl.value;else dirtyValues[key] = currentControl.value;\n    }\n  });\n  return dirtyValues;\n}\n;\nconst alphanum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport function makeid(length) {\n  let result = '';\n  const charactersLength = alphanum.length;\n\n  for (let i = 0; i < length; i++) result += alphanum.charAt(Math.floor(Math.random() * charactersLength));\n\n  return result;\n}\n;\nexport function getTopmostElement(element) {\n  while (element.parentElement && element.parentElement !== document.body) element = element.parentElement;\n\n  return element;\n}\n;\nexport function focusOutside(element, target) {\n  const topmost = getTopmostElement(target).parentElement !== null;\n  if (!topmost) return false; //if the element left the dom\n\n  if (!(element === null || element === void 0 ? void 0 : element.contains(target))) return true;\n  return false;\n}\n;\n/*https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors*/\n\nexport function shadeColor(color, percent) {\n  let R = parseInt(color.substring(1, 3), 16);\n  let G = parseInt(color.substring(3, 5), 16);\n  let B = parseInt(color.substring(5, 7), 16);\n  R = R * ((100 + percent) / 100) | 0;\n  G = G * ((100 + percent) / 100) | 0;\n  B = B * ((100 + percent) / 100) | 0; //cast back to int\n\n  R = R < 255 ? R : 255;\n  G = G < 255 ? G : 255;\n  B = B < 255 ? B : 255;\n  const RR = R.toString(16).length == 1 ? \"0\" + R.toString(16) : R.toString(16);\n  const GG = G.toString(16).length == 1 ? \"0\" + G.toString(16) : G.toString(16);\n  const BB = B.toString(16).length == 1 ? \"0\" + B.toString(16) : B.toString(16);\n  return \"#\" + RR + GG + BB;\n}\n;\n/*https://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript*/\n\nexport const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n    const byteNumbers = new Array(slice.length);\n\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, {\n    type: contentType\n  });\n  return blob;\n};\nlet imageExtension = ['png', 'jpeg', 'jpg', 'svg', 'heic'];\nexport function getFileType(ext) {\n  if (imageExtension.includes(ext)) return 'image/' + ext;\n  return 'application/' + ext;\n}\nconst fileColors = {\n  'impôts': \"#156C9D\",\n  'kbis': \"#156C9D\",\n  'urssaf': \"#F9C067\",\n  'trav. dis': \"#054162\",\n  'rc + dc': \"#999999\",\n  'congés payés': \"32A290\"\n};\nexport function getFileColor(name) {\n  name = name.toLowerCase();\n  if (fileColors[name]) return fileColors[name];\n  return \"#32A290\";\n}","map":null,"metadata":{},"sourceType":"module"}
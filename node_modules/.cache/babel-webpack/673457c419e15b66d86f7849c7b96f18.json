{"ast":null,"code":"import _asyncToGenerator from \"/Users/jlw/Documents/frontBatiuni/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ForgotPassword } from \"src/models/auth/auth.actions\";\nimport { take } from \"rxjs/operators\";\nimport { ComplexPassword, MatchField, setErrors } from \"src/validators/verify\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngxs/store\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../common/formerrors\";\nimport * as i5 from \"@angular/common\";\n\nfunction ForgotPasswordForm_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins 8 caract\\u00E8res\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ForgotPasswordForm_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins une lettre en majuscule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ForgotPasswordForm_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins une lettre en miniscule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ForgotPasswordForm_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins 8 caract\\u00E8res\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ForgotPasswordForm_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins une lettre en majuscule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ForgotPasswordForm_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Doit contenir au moins une lettre en miniscule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ForgotPasswordForm = /*#__PURE__*/(() => {\n  class ForgotPasswordForm {\n    constructor(route, router, cd, store) {\n      this.route = route;\n      this.router = router;\n      this.cd = cd;\n      this.store = store;\n      this.forgotPassword = new FormGroup({\n        password: new FormControl('', [ComplexPassword()]),\n        confirmedPassword: new FormControl('', [MatchField('password', 'Le mot de passe')])\n      });\n    }\n\n    ngOnInit() {\n      this.token = this.route.snapshot.params.token;\n    }\n\n    onSubmit(e) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let {\n          password\n        } = _this.forgotPassword.value;\n\n        _this.store.dispatch(new ForgotPassword(_this.token, password)).pipe(take(1)).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (success) {\n            let res = yield _this.router.navigate(['', 'connexion']);\n\n            if (!res) {\n              setErrors(_this.forgotPassword, {\n                all: 'Erreur inattendue. (500 ?)'\n              });\n\n              _this.cd.markForCheck();\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(), errors => {\n          setErrors(_this.forgotPassword, errors);\n\n          _this.cd.markForCheck();\n        });\n      })();\n    }\n\n  }\n\n  ForgotPasswordForm.ɵfac = function ForgotPasswordForm_Factory(t) {\n    return new (t || ForgotPasswordForm)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  ForgotPasswordForm.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ForgotPasswordForm,\n    selectors: [[\"forgot-password-form\"]],\n    decls: 20,\n    vars: 8,\n    consts: [[1, \"full-height\", \"form-control\", \"curved-border\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-title\"], [1, \"form-input\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-element\"], [\"class\", \"error\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"confirmedPassword\", 1, \"form-element\"], [1, \"form-action\"], [1, \"button\", \"discover\", \"gradient\", 2, \"width\", \"250px\", 3, \"disabled\"], [1, \"error\"]],\n    template: function ForgotPasswordForm_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordForm_Template_form_ngSubmit_0_listener($event) {\n          return ctx.onSubmit($event);\n        });\n        i0.ɵɵelementStart(1, \"h3\", 1);\n        i0.ɵɵtext(2, \"Modifier le mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"label\");\n        i0.ɵɵtext(5, \"Nouveau mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵtemplate(7, ForgotPasswordForm_div_7_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(8, ForgotPasswordForm_div_8_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(9, ForgotPasswordForm_div_9_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 2);\n        i0.ɵɵelementStart(11, \"label\");\n        i0.ɵɵtext(12, \"Confirmation de mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 5);\n        i0.ɵɵtemplate(14, ForgotPasswordForm_div_14_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(15, ForgotPasswordForm_div_15_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(16, ForgotPasswordForm_div_16_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"button\", 7);\n        i0.ɵɵtext(19, \"Valider\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.forgotPassword);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"password\").touched && (ctx.forgotPassword.get(\"password\").errors == null ? null : ctx.forgotPassword.get(\"password\").errors.minlength));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"password\").touched && (ctx.forgotPassword.get(\"password\").errors == null ? null : ctx.forgotPassword.get(\"password\").errors.uppercase));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"password\").touched && (ctx.forgotPassword.get(\"password\").errors == null ? null : ctx.forgotPassword.get(\"password\").errors.lowercase));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"confirmedPassword\").touched && (ctx.forgotPassword.get(\"confirmedPassword\").errors == null ? null : ctx.forgotPassword.get(\"confirmedPassword\").errors.minlength));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"confirmedPassword\").touched && (ctx.forgotPassword.get(\"confirmedPassword\").errors == null ? null : ctx.forgotPassword.get(\"confirmedPassword\").errors.uppercase));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.forgotPassword.get(\"confirmedPassword\").touched && (ctx.forgotPassword.get(\"confirmedPassword\").errors == null ? null : ctx.forgotPassword.get(\"confirmedPassword\").errors.lowercase));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.forgotPassword.touched || ctx.forgotPassword.status === \"INVALID\");\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i4.ControlErrorsDirective, i5.NgIf],\n    styles: [\"[_ngcontent-%COMP%]:root{--notification-size: $notification-size}.page-content-with-tabs[_ngcontent-%COMP%]{width:100%;overflow-y:auto;overflow-x:hidden;touch-action:pan-y!important}.page-content-with-tabs[_ngcontent-%COMP%]{margin-top:150px;margin-top:calc(constant(safe-area-inset-top) + 150px);margin-top:calc(env(safe-area-inset-top) + 150px);margin-bottom:0;margin-bottom:calc(constant(safe-area-inset-bottom) + 0);margin-bottom:calc(env(safe-area-inset-bottom) + 0);height:calc(100vh - 220px - env(safe-area-inset-bottom))}.invert[_ngcontent-%COMP%]{filter:invert(1)}\"],\n    changeDetection: 0\n  });\n  return ForgotPasswordForm;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { Logout } from \"src/models/auth/auth.actions\";\nimport { AuthState } from \"src/models/auth/auth.state\";\nimport { DataState } from \"src/models/new/data.state\";\nimport { GetUserData } from \"src/models/new/user/user.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngxs/store\";\nimport * as i2 from \"@angular/router\";\nexport let AuthResolver = /*#__PURE__*/(() => {\n  class AuthResolver {\n    constructor(store, router) {\n      this.store = store;\n      this.router = router;\n    }\n\n    resolve() {\n      let token = this.store.selectSnapshot(AuthState.token),\n          userId = this.store.selectSnapshot(DataState.currentUserId);\n      if (userId !== -1) return true;\n      if (!token) return throwError('no token');\n      return this.store.dispatch(new GetUserData(token)).pipe(catchError(() => {\n        this.store.dispatch(new Logout());\n        this.router.navigate(['']);\n        return throwError('GetUserData Failed.');\n      }));\n    }\n\n  }\n\n  AuthResolver.ɵfac = function AuthResolver_Factory(t) {\n    return new (t || AuthResolver)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthResolver,\n    factory: AuthResolver.ɵfac\n  });\n  return AuthResolver;\n})();\n;","map":null,"metadata":{},"sourceType":"module"}
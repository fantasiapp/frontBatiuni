@use "sass:list";
@import './variables';

@mixin cover-background {
  position: absolute;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
};

@mixin absolute-center($direction: 'xy', $position: absolute) {
  @if $position == absolute {
    position: absolute;
  } @else if $position == relative {
    position: relative;
  } @else { }

  @if $direction == 'x' {
    left: 50%;
    transform: translateX(-50%);
  } @else if $direction == 'y' {
    top: 50%;
    transform: translateY(-50%);
  } @else {
    left: 50%; top: 50%;
    transform: translate(-50%, -50%);
  }
};

@mixin circle($radius: 0, $color: #FFFFFF) {
  border-radius: 50%;
  background-color: $color;
  @if $radius != 0 {
    width: $radius;
    height: $radius;
  }
};

@mixin zoom($amount: 1) {
  transform: scale($amount);
}

@mixin rotate($angle: 0deg) {
  transform: rotate($angle);
};

@mixin triangle($direction, $size, $color) {
  content: ""; // ensures the arrows are visible

  // ensures the size of the arrows is correct:
  width: 0;
  height: 0;

  // Lists for positions/directions
  $directions: ('down', 'left', 'up', 'right');
  $positions: ('top', 'right', 'bottom', 'left');

  // Loop through each position
  @each $position in $positions {
    // Calculate the index of the position in the list
    $index: index($positions, $position);

    // If the position matches the direction, render a colored border
    @if nth($directions, $index) == $direction {
      border-#{$position}: $size solid $color;
    } @else {
      border-#{$position}: $size solid transparent;
    }
  }
}

@function opposite-direction($direction) {
  @if $direction == top {
    @return bottom;
  } @else if $direction == bottom {
    @return top;
  } @else if $direction == left {
    @return right;
  } @else if $direction == right {
    @return left;
  } @else {
    @error "Only accepts: top, right, bottom, left. Received: #{$direction} which isn't a direction.";
  }
};

@mixin set-safe-area($property, $direction: $property) {
  $positioning: (top, left, bottom, right);
  $boxes: (margin, padding, border);
  $allowed_properties: join($boxes, $positioning, comma);

  @if not list.index($allowed_properties, $property) {
    @error "safe-area only valid on: margin, padding, border and positioning properties. Recieved #{$property}."
  }
  $target: if(list.index($positioning, $property), $property, #{$property}-#{$direction});

  #{$target}: 0;
  #{$target}: constant(safe-area-inset-#{$direction});
  #{$target}: env(safe-area-inset-#{$direction});
}

@mixin with-set-safe-area($property, $direction: $property, $offset: 0px 0px) {
  $positioning: (top, left, bottom, right);
  $boxes: (margin, padding, border);
  $allowed_properties: join($boxes, $positioning, comma);
  
  @if not list.index($allowed_properties, $property) {
    @error "safe-area only valid on: margin, padding, border and positioning properties. Recieved #{$property}."
  }

  $target: if(list.index($positioning, $property), $property, #{$property}-#{$direction});

  #{$target}: list.nth($offset, 1);
  #{$target}: calc(constant(safe-area-inset-#{$direction}) + #{list.nth($offset, 1)});
  #{$target}: calc(env(safe-area-inset-#{$direction}) + #{list.nth($offset, 1)});
}

%overflow-y {
  width: 100%;
  overflow-y: auto;
  overflow-x: hidden;
  //scroll-behavior: smooth;
  touch-action: pan-y !important;
}

%header {
  @include set-safe-area(top);
  padding: $highlight-margin $page-padding;
  height: $sticky-header-height;
  z-index: 10;
  //optional
  background: $secondaryBackground;
  color: white;
};

%page {
  display: block;
  height: calc(100vh - #{$navigation-height});
  @extend %overflow-y;
}

%content-with-header {
  @extend %overflow-y;
  @include with-set-safe-area(margin, top, $sticky-header-height);
  @include set-safe-area(margin, bottom);
  height: calc(100vh - #{$sticky-header-height});
}

.paging-only-content {
  @extend %overflow-y;
  @include with-set-safe-area(margin, top, $paging-height + $paging-decoration-height 0);
  height: calc(100vh - #{$paging-height + $paging-decoration-height});
}

.page-content-with-tabs {
  @extend %overflow-y;
  @include with-set-safe-area(margin, top, $mission-header-height 0);
  height: calc(100vh - #{$mission-header-height + $navigation-height});
}

.page-content {
  @extend %overflow-y;
  @include with-set-safe-area(margin, top, $sticky-header-height 0);
  height: calc(100vh - #{$sticky-header-height + $navigation-height});
}

.full-page {
  @extend %overflow-y;
  @include set-safe-area(top);
  @include set-safe-area(bottom);
}